//
// Copyright (c) 2019 Wee Loong Kuan
//
// Part of BareMetalLib, under the Apache License v2.0 with LLVM Exceptions. See
// https://llvm.org/LICENSE.txt for license information.
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//

#pragma once
#include "type_traits/add_const.hpp"
#include "type_traits/add_cv.hpp"
#include "type_traits/add_lvalue_reference.hpp"
#include "type_traits/add_pointer.hpp"
#include "type_traits/add_rvalue_reference.hpp"
#include "type_traits/add_volatile.hpp"
#include "type_traits/aligned_storage.hpp"
#include "type_traits/aligned_union.hpp"
#include "type_traits/alignment_of.hpp"
#include "type_traits/bool_constant.hpp"
#include "type_traits/common_type.hpp"
#include "type_traits/conditional.hpp"
#include "type_traits/conjunction.hpp"
#include "type_traits/decay.hpp"
#include "type_traits/detected_or.hpp"
#include "type_traits/detected_ty.hpp"
#include "type_traits/disjunction.hpp"
#include "type_traits/enable_if.hpp"
#include "type_traits/extent.hpp"
#include "type_traits/false_type.hpp"
#include "type_traits/has_unique_object_representations.hpp"
#include "type_traits/has_virtual_destructor.hpp"
#include "type_traits/integral_constant.hpp"
#include "type_traits/invoke_result.hpp"
#include "type_traits/is_abstract.hpp"
#include "type_traits/is_aggregate.hpp"
#include "type_traits/is_arithmetic.hpp"
#include "type_traits/is_array.hpp"
#include "type_traits/is_assignable.hpp"
#include "type_traits/is_base_of.hpp"
#include "type_traits/is_class.hpp"
#include "type_traits/is_compound.hpp"
#include "type_traits/is_const.hpp"
#include "type_traits/is_constructible.hpp"
#include "type_traits/is_convertible.hpp"
#include "type_traits/is_copy_assignable.hpp"
#include "type_traits/is_copy_constructible.hpp"
#include "type_traits/is_default_constructible.hpp"
#include "type_traits/is_destructible.hpp"
#include "type_traits/is_detected.hpp"
#include "type_traits/is_empty.hpp"
#include "type_traits/is_enum.hpp"
#include "type_traits/is_explicitly_constructible.hpp"
#include "type_traits/is_final.hpp"
#include "type_traits/is_floating_point.hpp"
#include "type_traits/is_function.hpp"
#include "type_traits/is_fundamental.hpp"
#include "type_traits/is_integral.hpp"
#include "type_traits/is_invocable.hpp"
#include "type_traits/is_list_convertible.hpp"
#include "type_traits/is_lvalue_reference.hpp"
#include "type_traits/is_member_function_pointer.hpp"
#include "type_traits/is_member_object_pointer.hpp"
#include "type_traits/is_member_pointer.hpp"
#include "type_traits/is_move_assignable.hpp"
#include "type_traits/is_move_constructible.hpp"
#include "type_traits/is_null_pointer.hpp"
#include "type_traits/is_object.hpp"
#include "type_traits/is_pod.hpp"
#include "type_traits/is_pointer.hpp"
#include "type_traits/is_polymorphic.hpp"
#include "type_traits/is_reference.hpp"
#include "type_traits/is_referenceable.hpp"
#include "type_traits/is_reference_wrapper.hpp"
#include "type_traits/is_rvalue_reference.hpp"
#include "type_traits/is_same.hpp"
#include "type_traits/is_scalar.hpp"
#include "type_traits/is_signed.hpp"
#include "type_traits/is_standard_layout.hpp"
#include "type_traits/is_swappable.hpp"
#include "type_traits/is_swappable_with.hpp"
#include "type_traits/is_trivial.hpp"
#include "type_traits/is_trivially_assignable.hpp"
#include "type_traits/is_trivially_constructible.hpp"
#include "type_traits/is_trivially_copyable.hpp"
#include "type_traits/is_trivially_copy_assignable.hpp"
#include "type_traits/is_trivially_copy_constructible.hpp"
#include "type_traits/is_trivially_default_constructible.hpp"
#include "type_traits/is_trivially_destructible.hpp"
#include "type_traits/is_trivially_move_assignable.hpp"
#include "type_traits/is_trivially_move_constructible.hpp"
#include "type_traits/is_unbounded_array.hpp"
#include "type_traits/is_union.hpp"
#include "type_traits/is_unsigned.hpp"
#include "type_traits/is_void.hpp"
#include "type_traits/is_volatile.hpp"
#include "type_traits/member_pointer_class.hpp"
#include "type_traits/negation.hpp"
#include "type_traits/nonesuch.hpp"
#include "type_traits/pack_size.hpp"
#include "type_traits/rank.hpp"
#include "type_traits/remove_all_extents.hpp"
#include "type_traits/remove_const.hpp"
#include "type_traits/remove_cv.hpp"
#include "type_traits/remove_cvref.hpp"
#include "type_traits/remove_extent.hpp"
#include "type_traits/remove_pointer.hpp"
#include "type_traits/remove_reference.hpp"
#include "type_traits/remove_volatile.hpp"
#include "type_traits/size_of.hpp"
#include "type_traits/true_type.hpp"
#include "type_traits/type_identity.hpp"
#include "type_traits/type_pack_element.hpp"
#include "type_traits/void_ty.hpp"
