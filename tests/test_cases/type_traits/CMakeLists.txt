#
# Copyright (c) 2019 Wee Loong Kuan
#
# Part of BareMetalLib, under the Apache License v2.0 with LLVM Exceptions. See
# https://llvm.org/LICENSE.txt for license information.
#
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#

bml_add_test("type_traits.integral_constant" integral_constant.cpp)
bml_add_test("type_traits.bool_constant" bool_constant.cpp)
bml_add_test("type_traits.true_type" true_type.cpp)
bml_add_test("type_traits.false_type" false_type.cpp)
bml_add_test("type_traits.is_same" is_same.cpp)
bml_add_test("type_traits.void_ty" void_ty.cpp)
bml_add_test("type_traits.add_const" add_const.cpp)
bml_add_test("type_traits.add_volatile" add_volatile.cpp)
bml_add_test("type_traits.add_cv" add_cv.cpp)
bml_add_test("type_traits.remove_const" remove_const.cpp)
bml_add_test("type_traits.remove_volatile" remove_volatile.cpp)
bml_add_test("type_traits.remove_cv" remove_cv.cpp)
bml_add_test("type_traits.conditional" conditional.cpp)
bml_add_test("type_traits.is_constructible" is_constructible.cpp)
bml_add_test("type_traits.is_default_constructible" is_default_constructible.cpp)
bml_add_test("type_traits.detected_or" detected_or.cpp)
bml_add_test("type_traits.is_aggregate" is_aggregate.cpp)
bml_add_test("type_traits.is_detected" is_detected.cpp)
bml_add_test("type_traits.detected_ty" detected_ty.cpp)
bml_add_test("type_traits.is_referenceable" is_referenceable.cpp)
bml_add_test("type_traits.add_lvalue_reference" add_lvalue_reference.cpp)
bml_add_test("type_traits.add_rvalue_reference" add_rvalue_reference.cpp)
bml_add_test("type_traits.remove_reference" remove_reference.cpp)
bml_add_test("type_traits.remove_cvref" remove_cvref.cpp)
bml_add_test("type_traits.is_void" is_void.cpp)
bml_add_test("type_traits.add_pointer" add_pointer.cpp)
bml_add_test("type_traits.remove_pointer" remove_pointer.cpp)
bml_add_test("type_traits.is_assignable" is_assignable.cpp)
bml_add_test("type_traits.is_copy_constructible" is_copy_constructible.cpp)
bml_add_test("type_traits.is_move_constructible" is_move_constructible.cpp)
bml_add_test("type_traits.is_copy_assignable" is_copy_assignable.cpp)
bml_add_test("type_traits.is_move_assignable" is_move_assignable.cpp)
bml_add_test("type_traits.nonesuch" nonesuch.cpp)
bml_add_test("type_traits.is_integral" is_integral.cpp)
bml_add_test("type_traits.is_floating_point" is_floating_point.cpp)
bml_add_test("type_traits.is_array" is_array.cpp)
bml_add_test("type_traits.is_class" is_class.cpp)
bml_add_test("type_traits.is_enum" is_enum.cpp)
bml_add_test("type_traits.is_pod" is_pod.cpp)
bml_add_test("type_traits.is_trivial" is_trivial.cpp)
bml_add_test("type_traits.is_union" is_union.cpp)
bml_add_test("type_traits.is_standard_layout" is_standard_layout.cpp)
bml_add_test("type_traits.is_null_pointer" is_null_pointer.cpp)
bml_add_test("type_traits.is_lvalue_reference" is_lvalue_reference.cpp)
bml_add_test("type_traits.is_rvalue_reference" is_rvalue_reference.cpp)
bml_add_test("type_traits.is_reference" is_reference.cpp)
bml_add_test("type_traits.is_base_of" is_base_of.cpp)
bml_add_test("type_traits.remove_extent" remove_extent.cpp)
bml_add_test("type_traits.remove_all_extents" remove_all_extents.cpp)
bml_add_test("type_traits.is_arithmetic" is_arithmetic.cpp)
bml_add_test("type_traits.is_signed" is_signed.cpp)
bml_add_test("type_traits.is_unsigned" is_unsigned.cpp)
bml_add_test("type_traits.is_function" is_function.cpp)
bml_add_test("type_traits.is_member_pointer" is_member_pointer.cpp)
bml_add_test("type_traits.is_member_function_pointer" is_member_function_pointer.cpp)
bml_add_test("type_traits.is_member_object_pointer" is_member_object_pointer.cpp)
bml_add_test("type_traits.is_empty" is_empty.cpp)
bml_add_test("type_traits.is_pointer" is_pointer.cpp)
bml_add_test("type_traits.is_scalar" is_scalar.cpp)
bml_add_test("type_traits.is_object" is_object.cpp)
bml_add_test("type_traits.is_fundamental" is_fundamental.cpp)
bml_add_test("type_traits.is_compound" is_compound.cpp)
bml_add_test("type_traits.is_const" is_const.cpp)
bml_add_test("type_traits.is_volatile" is_volatile.cpp)
bml_add_test("type_traits.is_trivially_constructible" is_trivially_constructible.cpp)
bml_add_test("type_traits.is_trivially_assignable" is_trivially_assignable.cpp)
bml_add_test("type_traits.is_trivially_copyable" is_trivially_copyable.cpp)
bml_add_test("type_traits.is_trivially_default_constructible"
    is_trivially_default_constructible.cpp)
bml_add_test("type_traits.is_trivially_copy_constructible" is_trivially_copy_constructible.cpp)
bml_add_test("type_traits.is_trivially_move_constructible" is_trivially_move_constructible.cpp)
bml_add_test("type_traits.is_trivially_copy_assignable" is_trivially_copy_assignable.cpp)
bml_add_test("type_traits.is_trivially_move_assignable" is_trivially_move_assignable.cpp)
bml_add_test("type_traits.is_unbounded_array" is_unbounded_array.cpp)
bml_add_test("type_traits.is_destructible" is_destructible.cpp)
bml_add_test("type_traits.is_trivially_destructible" is_trivially_destructible.cpp)
bml_add_test("type_traits.is_polymorphic" is_polymorphic.cpp)
bml_add_test("type_traits.is_abstract" is_abstract.cpp)
bml_add_test("type_traits.is_final" is_final.cpp)
bml_add_test("type_traits.has_virtual_destructor" has_virtual_destructor.cpp)
bml_add_test("type_traits.alignment_of" alignment_of.cpp)
bml_add_test("type_traits.rank" rank.cpp)
bml_add_test("type_traits.extent" extent.cpp)
bml_add_compile_failure_test("type_traits.extent.fail.neg_n" extent.fail.neg_n.cpp
    "N cannot be negative.")
bml_add_test("type_traits.enable_if" enable_if.cpp)
bml_add_test("type_traits.has_unique_object_representations" has_unique_object_representations.cpp)
bml_add_test("type_traits.type_identity" type_identity.cpp)
bml_add_test("type_traits.decay" decay.cpp)
bml_add_test("type_traits.aligned_storage" aligned_storage.cpp)
bml_add_compile_failure_test("type_traits.aligned_storage.fail.neg_len"
    aligned_storage.fail.neg_len.cpp "Len cannot be negative.")
bml_add_compile_failure_test("type_traits.aligned_storage.fail.neg_align"
    aligned_storage.fail.neg_align.cpp "Alignment cannot be negative.")
bml_add_test("type_traits.aligned_union" aligned_union.cpp)
bml_add_compile_failure_test("type_traits.aligned_union.fail.neg_len" aligned_union.fail.neg_len.cpp
    "Len cannot be negative.")
bml_add_test("type_traits.conjunction" conjunction.cpp)
bml_add_test("type_traits.disjunction" disjunction.cpp)
bml_add_test("type_traits.negation" negation.cpp)
bml_add_test("type_traits.is_convertible" is_convertible.cpp)
bml_add_test("type_traits.is_swappable_with" is_swappable_with.cpp)
bml_add_test("type_traits.is_swappable" is_swappable.cpp)
bml_add_test("type_traits.size_of" size_of.cpp)
bml_add_compile_failure_test("type_traits.size_of.fail.incomplete" size_of.fail.incomplete.cpp)
bml_add_test("type_traits.type_pack_element" type_pack_element.cpp)
bml_add_compile_failure_test("type_traits.type_pack_element.fail.neg_n"
    type_pack_element.fail.neg_n.cpp "N cannot be negative.")
bml_add_test("type_traits.pack_size" pack_size.cpp)
bml_add_test("type_traits.member_pointer_class" member_pointer_class.cpp)
bml_add_test("type_traits.invoke_result" invoke_result.cpp)
bml_add_test("type_traits.is_reference_wrapper" is_reference_wrapper.cpp)
bml_add_compile_failure_test("type_traits.is_reference_wrapper.fail.instantiate_wrapper"
    is_reference_wrapper.fail.instantiate_wrapper.cpp)
bml_add_test("type_traits.is_invocable" is_invocable.cpp)
bml_add_test("type_traits.common_type" common_type.cpp)
bml_add_test("type_traits.is_list_convertible" is_list_convertible.cpp)
bml_add_test("type_traits.is_explicitly_constructible" is_explicitly_constructible.cpp)

# Compiler-specific tests.
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL Clang)
    bml_add_test("type_traits.is_integral.clang" is_integral.clang.cpp)
endif()

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL GNU)
    bml_add_test("type_traits.is_integral.gcc.extensions_off" is_integral.gcc.extensions_off.cpp)
    set_target_properties("bml.tests.type_traits.is_integral.gcc.extensions_off" PROPERTIES
        CXX_EXTENSIONS OFF)

    bml_add_test("type_traits.is_integral.gcc.extensions_on" is_integral.gcc.extensions_on.cpp)
    set_target_properties("bml.tests.type_traits.is_integral.gcc.extensions_on" PROPERTIES
        CXX_EXTENSIONS ON)
endif()
